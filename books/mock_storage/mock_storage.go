// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	model "login/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), ctx, user)
}

// Delete mocks base method.
func (m *MockIUserRepository) Delete(ctx context.Context, uid uint, hard bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, uid, hard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserRepositoryMockRecorder) Delete(ctx, uid, hard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserRepository)(nil).Delete), ctx, uid, hard)
}

// GetUserByEmail mocks base method.
func (m *MockIUserRepository) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockIUserRepository) GetUserByID(ctx context.Context, UID uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, UID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserRepositoryMockRecorder) GetUserByID(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByID), ctx, UID)
}

// GetUserRecords mocks base method.
func (m *MockIUserRepository) GetUserRecords(ctx context.Context, email string) ([]*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRecords", ctx, email)
	ret0, _ := ret[0].([]*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRecords indicates an expected call of GetUserRecords.
func (mr *MockIUserRepositoryMockRecorder) GetUserRecords(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRecords", reflect.TypeOf((*MockIUserRepository)(nil).GetUserRecords), ctx, email)
}

// GetUsers mocks base method.
func (m *MockIUserRepository) GetUsers(ctx context.Context) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserRepositoryMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserRepository)(nil).GetUsers), ctx)
}

// GetUsersLastMonth mocks base method.
func (m *MockIUserRepository) GetUsersLastMonth(ctx context.Context, time string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersLastMonth", ctx, time)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersLastMonth indicates an expected call of GetUsersLastMonth.
func (mr *MockIUserRepositoryMockRecorder) GetUsersLastMonth(ctx, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersLastMonth", reflect.TypeOf((*MockIUserRepository)(nil).GetUsersLastMonth), ctx, time)
}

// Update mocks base method.
func (m *MockIUserRepository) Update(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepositoryMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepository)(nil).Update), ctx, user)
}

// MockIBookRepository is a mock of IBookRepository interface.
type MockIBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookRepositoryMockRecorder
}

// MockIBookRepositoryMockRecorder is the mock recorder for MockIBookRepository.
type MockIBookRepositoryMockRecorder struct {
	mock *MockIBookRepository
}

// NewMockIBookRepository creates a new mock instance.
func NewMockIBookRepository(ctrl *gomock.Controller) *MockIBookRepository {
	mock := &MockIBookRepository{ctrl: ctrl}
	mock.recorder = &MockIBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookRepository) EXPECT() *MockIBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBookRepository) CreateBook(ctx context.Context, book *model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookRepositoryMockRecorder) CreateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBookRepository)(nil).CreateBook), ctx, book)
}

// DeleteBook mocks base method.
func (m *MockIBookRepository) DeleteBook(ctx context.Context, bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockIBookRepositoryMockRecorder) DeleteBook(ctx, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockIBookRepository)(nil).DeleteBook), ctx, bid)
}

// GetBookByID mocks base method.
func (m *MockIBookRepository) GetBookByID(ctx context.Context, bid uint) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, bid)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockIBookRepositoryMockRecorder) GetBookByID(ctx, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockIBookRepository)(nil).GetBookByID), ctx, bid)
}

// GetBookByTitle mocks base method.
func (m *MockIBookRepository) GetBookByTitle(ctx context.Context, title string) (*model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByTitle", ctx, title)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByTitle indicates an expected call of GetBookByTitle.
func (mr *MockIBookRepositoryMockRecorder) GetBookByTitle(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByTitle", reflect.TypeOf((*MockIBookRepository)(nil).GetBookByTitle), ctx, title)
}

// UpdateRevenue mocks base method.
func (m *MockIBookRepository) UpdateRevenue(ctx context.Context, revenue model.BookRevenue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRevenue", ctx, revenue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRevenue indicates an expected call of UpdateRevenue.
func (mr *MockIBookRepositoryMockRecorder) UpdateRevenue(ctx, revenue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRevenue", reflect.TypeOf((*MockIBookRepository)(nil).UpdateRevenue), ctx, revenue)
}

// MockIRecordRepository is a mock of IRecordRepository interface.
type MockIRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRecordRepositoryMockRecorder
}

// MockIRecordRepositoryMockRecorder is the mock recorder for MockIRecordRepository.
type MockIRecordRepositoryMockRecorder struct {
	mock *MockIRecordRepository
}

// NewMockIRecordRepository creates a new mock instance.
func NewMockIRecordRepository(ctrl *gomock.Controller) *MockIRecordRepository {
	mock := &MockIRecordRepository{ctrl: ctrl}
	mock.recorder = &MockIRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRecordRepository) EXPECT() *MockIRecordRepositoryMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockIRecordRepository) CreateRecord(ctx context.Context, record *model.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockIRecordRepositoryMockRecorder) CreateRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockIRecordRepository)(nil).CreateRecord), ctx, record)
}

// DeleteRecord mocks base method.
func (m *MockIRecordRepository) DeleteRecord(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockIRecordRepositoryMockRecorder) DeleteRecord(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockIRecordRepository)(nil).DeleteRecord), ctx)
}

// GetBorrowedBooks mocks base method.
func (m *MockIRecordRepository) GetBorrowedBooks(ctx context.Context) ([]model.BookWithRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrowedBooks", ctx)
	ret0, _ := ret[0].([]model.BookWithRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrowedBooks indicates an expected call of GetBorrowedBooks.
func (mr *MockIRecordRepositoryMockRecorder) GetBorrowedBooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrowedBooks", reflect.TypeOf((*MockIRecordRepository)(nil).GetBorrowedBooks), ctx)
}

// GetBorrowedRecordByBID mocks base method.
func (m *MockIRecordRepository) GetBorrowedRecordByBID(ctx context.Context, bid uint) (*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorrowedRecordByBID", ctx, bid)
	ret0, _ := ret[0].(*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorrowedRecordByBID indicates an expected call of GetBorrowedRecordByBID.
func (mr *MockIRecordRepositoryMockRecorder) GetBorrowedRecordByBID(ctx, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorrowedRecordByBID", reflect.TypeOf((*MockIRecordRepository)(nil).GetBorrowedRecordByBID), ctx, bid)
}

// GetRecordByID mocks base method.
func (m *MockIRecordRepository) GetRecordByID(ctx context.Context, rid int) (*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByID", ctx, rid)
	ret0, _ := ret[0].(*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByID indicates an expected call of GetRecordByID.
func (mr *MockIRecordRepositoryMockRecorder) GetRecordByID(ctx, rid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByID", reflect.TypeOf((*MockIRecordRepository)(nil).GetRecordByID), ctx, rid)
}

// GetRecordsByEmail mocks base method.
func (m *MockIRecordRepository) GetRecordsByEmail(ctx context.Context, email string) ([]*model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordsByEmail", ctx, email)
	ret0, _ := ret[0].([]*model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordsByEmail indicates an expected call of GetRecordsByEmail.
func (mr *MockIRecordRepositoryMockRecorder) GetRecordsByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordsByEmail", reflect.TypeOf((*MockIRecordRepository)(nil).GetRecordsByEmail), ctx, email)
}

// UpdateRecord mocks base method.
func (m *MockIRecordRepository) UpdateRecord(ctx context.Context, record *model.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockIRecordRepositoryMockRecorder) UpdateRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockIRecordRepository)(nil).UpdateRecord), ctx, record)
}
