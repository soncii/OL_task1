basePath: /api/v1
definitions:
  model.Book:
    properties:
      author:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  model.BookCreateReq:
    properties:
      author:
        type: string
      title:
        type: string
    type: object
  model.BookCreateResp:
    properties:
      bid:
        type: integer
      createdAt:
        type: string
    type: object
  model.GetUsersWithRecordResp:
    properties:
      users:
        items:
          $ref: '#/definitions/model.UserWithRecord'
        type: array
    type: object
  model.Record:
    properties:
      book:
        $ref: '#/definitions/model.Book'
      bookID:
        type: integer
      borrowed:
        type: boolean
      id:
        type: integer
      returnedAt:
        type: string
      takenAt:
        type: string
      transactionID:
        type: integer
      userID:
        type: integer
    type: object
  model.RecordCreateReq:
    properties:
      bid:
        type: integer
      price:
        type: number
      uid:
        type: integer
    type: object
  model.RecordWithTransaction:
    properties:
      bookID:
        type: integer
      borrowed:
        type: boolean
      id:
        type: integer
      price:
        type: number
      returnedAt:
        type: string
      takenAt:
        type: string
      transactionID:
        type: integer
      userID:
        type: integer
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      records:
        items:
          $ref: '#/definitions/model.Record'
        type: array
    type: object
  model.UserChangePassResp:
    properties:
      updatedAt:
        type: string
    type: object
  model.UserCreateReq:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  model.UserCreateResp:
    properties:
      createdAt:
        type: string
      uid:
        type: integer
    type: object
  model.UserEmailPassReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.UserWithRecord:
    properties:
      count:
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This API manages a library system, including users, books, and borrowing
    records.
  title: Library Management System API
  version: "1.0"
paths:
  /book:
    post:
      consumes:
      - application/json
      description: Create and save a new book
      parameters:
      - description: Book details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.BookCreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.BookCreateResp'
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - Book
  /books/borrowed:
    get:
      consumes:
      - application/json
      description: Retrieves a list of borrowed books
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Book'
            type: array
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all borrowed books with Revenues
      tags:
      - Record
  /borrow:
    post:
      consumes:
      - application/json
      description: Registers the book borrowing
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Record details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.RecordCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Record'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Borrow book
      tags:
      - Record
  /login:
    post:
      consumes:
      - application/json
      description: Validate user credentials and generate JWT token
      parameters:
      - description: User details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Something went wrong!
          schema:
            type: string
      summary: Validate user credentials
      tags:
      - User
  /password:
    put:
      consumes:
      - application/json
      description: Change user password by providing current password and new password
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User password details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UserEmailPassReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserChangePassResp'
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /record/{rid}:
    get:
      consumes:
      - application/json
      description: Retrieves the record of book borrowing with price by ID
      parameters:
      - description: Record ID
        in: path
        name: rid
        required: true
        type: string
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RecordWithTransaction'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get borrow record with price
      tags:
      - Record
  /records:
    get:
      consumes:
      - application/json
      description: Gets all records of a user
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Record'
            type: array
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user's records
      tags:
      - User
  /records/month:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users who registered in the last month
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GetUsersWithRecordResp'
            type: array
        "500":
          description: Something went wrong!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users who borrowed books last month
      tags:
      - User
  /user:
    post:
      consumes:
      - application/json
      description: Saves User
      parameters:
      - description: User details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UserCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserCreateResp'
        "500":
          description: Something went wrong!
          schema:
            type: string
      summary: Create a new User
      tags:
      - User
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users along with the books they've borrowed
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users with borrowed books
      tags:
      - User
swagger: "2.0"
